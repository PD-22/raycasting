let wallTextures = randomTextures(10, 2);

Bullet.texture = makeMatrix(16, 16).map((r, i) =>
    r.map((c, j) => (i == 8 || i == 7) &&
        (j == 8 || j == 7) ? [255, 255, 0] : -1));

let c0 = randomColor()
let c1 = multClr(c0, 0.2)
Player.textures = [[
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, c0, c0, c0, c0, -1, -1],
    [-1, -1, c0, c0, c0, c0, -1, -1],
    [-1, -1, c1, c0, c0, c0, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, c0, c0, c0, c0, -1, -1],
], [
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, c0, c0, c0, c0, - 1, -1],
    [-1, c1, c0, c0, c0, c0, -1, -1],
    [-1, -1, -1, c0, c0, c0, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, c0, c0, c0, -1, -1, -1],
], [
    [-1, -1, -1, c1, c1, -1, -1, -1],
    [-1, -1, -1, c1, c1, -1, -1, -1],
    [-1, -1, c1, c1, c1, c1, -1, -1],
    [-1, -1, c1, c1, c1, c1, -1, -1],
    [-1, -1, c1, c1, c1, c1, -1, -1],
    [-1, -1, -1, c1, c1, -1, -1, -1],
    [-1, -1, -1, c1, c1, -1, -1, -1],
    [-1, -1, c1, c1, c1, c1, -1, -1],
], [
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, c0, c0, c0, c0, - 1, -1],
    [-1, -1, c0, c0, c0, c0, c1, -1],
    [-1, -1, c0, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, -1, -1, -1],
    [-1, -1, -1, c0, c0, c0, -1, -1],
], [
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, - 1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, c1, c1, -1, -1, -1],
    [-1, -1, c1, c1, c1, c1, -1, -1],
]];

let myMap = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
    [1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 4, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
    [1, 0, 5, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
];